#
# Configure endpoint
#
endpoint = {
    name = "example"        # Possibly non-unique name for the local node
    deviceClass = "drone"   # Discoverable device class
    type = "zyre"           # Endpoint type
    parameters = {          # Endpoint parameters, which for Zyre endpoints can be:
        # ifname = "eth0"       # Network interface to bind to
        # port = 34000          # Port to use for UDP beacons
        security = true
        privateKey= "edKFMPh+t2gmqaFzCuvzYXqZj+5PVSFDnNbdtBagAp8B2ThBor8DvfettHVafxnDZgEgaymv43qmfhl+UBPIpQ=="
	publicKey = "Adk4QaK/A733rbR1Wn8Zw2YBIGspr+N6pn4ZflATyKU="
	signature = "kgJnRa/7/KrErXZ1lobmV/XVcacE94A1+KwWfxF4zjbroafwrU0PYkEZEC0C5afT6XJDNS/q3TjZun3F6gxXBA=="
	ca = "utGq0AIAV+c3JmwOsS5/h2T6mp331GD8WQhMzcPyzGs="
    }
}

#
# Configure bridged services
#
services = {

    #
    # Telemetry topics
    # 
    # The bridge will subscribe to these topics and forward
    # their latest value to telemetry subscribers.
    #
    #  - source:  the ROS topic that provides the value
    #             for the property - preferably latched
    #  - message: fully qualified name of the underlying
    #             ROS message type
    #  - name:    the discoverable name of the topic
    #  - status:  whether to include the value of this 
    #             property in the status broadcast
    #
    telemetryTopics = (
        {
            source = "example/telemetry/heartbeatCounter",
            message = "swarmros/UInt",
            name = "heartbeatCounter",
            status = true
        },
        {
            source = "example/telemetry/exampleComplexMessage", 
            message = "swarmros/ExampleComplexMessage",
            name = "exampleComplexMessage",
            status = false
        }
    )

    #
    # Outgoing events
    #
    # The bridge will subscribe to these topics and forward
    # received messages as events to the swarm.
    #
    #  - message: fully qualified name of the underlying
    #             ROS message type (must have a field named
    #             header with message type swarmros/EventHeader)
    #  - source:  ROS topic to forward events from
    #
    outgoingEvents = (
        {
            message = "swarmros/SimpleEvent",
            source = "example/events/heartbeat"
        },
        {
            message = "swarmros/ExampleEvent",
            source = "example/events/report"        
        },
        {
            message = "swarmros/SimpleEvent",
            source = "example/events/pong"        
        }
    )

    #
    # Incoming events
    #
    # The bridge will listen to these events and republish
    # them under ROS topics.
    #
    # NOTE: Only one handler per event name can be added. If
    #       desired, handlers with the same message type can
    #       republish to the same topic.
    #
    #  - suffix:  will be published under events/<suffix>
    #  - message: fully qualified name of the underlying
    #             ROS message type (must have a field named
    #             header with message type swarmros/EventHeader)
    #  - name:    discoverable event name
    #
    incomingEvents = (
        {
            suffix = "heartbeat",
            message = "swarmros/SimpleEvent",
            name = "heartbeat"
        },
        {
            suffix = "report",
            message = "swarmros/ExampleEvent",
            name = "report"
        },
        {
            suffix = "ping",
            message = "swarmros/SimpleEvent",
            name = "ping"
        }
    )

    #
    # Published parameters
    #
    # The bridge will load the value of these parameters from
    # the ROS Parameter Server, then publish them both as
    # ROS topics and as remotely available key-value targets.
    #
    # NOTE: Both suffixes and parameter names must be unique. If
    #       desired, two parameter publishers can reference the 
    #       same ROS parameter path. Parameters must have a valid 
    #       value before the bridge is started.
    #
    #  - suffix:  will be published under parameters/<suffix>
    #  - message: fully qualified name of the underlying
    #             ROS message type (can by any type)
    #  - name:    discoverable key-value path
    #  - path:    ROS parameter path
    #  - rw:      whether set requests are accepted
    #
    publishedParameters = (
        {
            suffix = "reportInterval",
            message = "swarmros/UInt",
            name = "reportInterval",
            path = "example/reportInterval",
            rw = true
        }
    )

    #
    # Bridged parameters
    #
    # The bridge will load the value of these parameters from
    # the ROS Parameter Server, then publish them as remotely
    # available key-value targets.
    #
    # NOTE: Parameter names must be unique. If desired, two
    #       parameter publishers can reference the same ROS
    #       parameter path. Parameters must have a valid 
    #       value before the bridge is started.
    #
    #  - name:    discoverable key-value path
    #  - path:    ROS parameter path
    #  - rw:      whether set requests are accepted
    #
    bridgedParameters = (
        {
            name = "exampleBridgedParameter",
            path = "example/exampleBridgedParameter",
            rw = true
        }
    )

}
